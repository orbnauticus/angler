#!/usr/bin/env python3

from angler.core import Manifest, default_manifest, Session, setup
from angler.command import Add
from angler.util import uri, key_value

import argparse
import cmd
import os
import shlex


def single_arg(string):
    values = shlex.split(string)
    if len(values) > 1:
        raise ValueError("Unexpected arguments: {}".format(values[1:]))
    return values[0]


class AnglerShell(cmd.Cmd):
    def __init__(self, manifest):
        super(AnglerShell, self).__init__()
        self.settings = dict()
        self.manifest = manifest
        self.session = Session(manifest)
        self.settings['manifest'] = manifest.database
        self.settings['curdir'] = ''
        self.prompt = '{manifest}#{curdir}âŸ«'
        self.settings['prompt2'] = '>'
        self.multiline = ''

    @property
    def prompt(self):
        if self.multiline:
            return self.settings['prompt2'] + ' '
        else:
            return self.settings['prompt'].format(**self.settings) + ' '

    @prompt.setter
    def prompt(self, new):
        self.settings['prompt'] = new

    def emptyline(self):
        pass

    def parseline(self, line):
        if self.multiline:
            line = '{}\n{}'.format(self.multiline, line)
        self.multiline = ''
        try:
            words = shlex.split(line)
        except ValueError as error:
            if error.args == ('No closing quotation',):
                self.multiline = line
                return None, None, ''
            elif error.args == ('No escaped character',):
                self.multiline = line[:-1]
                return None, None, ''
        if not words:
            return None, None, ''
        cmd, arg = words[0], words[1:]
        return cmd, arg, line

    def default(self, line):
        if line == 'EOF':
            print('exit')
            return True
        else:
            return super(AnglerShell, self).default(line)

    def do_exit(self, args):
        return True

    def do_add(self, args):
        try:
            add = Add.from_arguments(self.manifest, args)
        except SystemExit:
            return
        add.run()

    def do_stub(self, args):
        print(args)

    def do_var(self, args):
        if not args:
            for key in sorted(self.settings):
                print('{}={!r}'.format(key, self.settings[key]))
            return
        key, successful, value = arg.partition('=')
        if successful:
            self.settings[key.strip()] = single_arg(value)
        else:
            key = arg.strip()
            print('{}={!r}'.format(key, self.settings[key]))

    def do_cd(self, args):
        self.settings['curdir'] = args[0]

    def do_ls(self, args):
        arg = (args[:0] or [self.settings['curdir']])[0]
        if not arg:
            for scheme in self.manifest.plugins:
                print('{}://'.format(scheme))
        else:
            print('Not Implemented!')

    def help_add(self):
        print(Add.help())


if __name__ == '__main__':

    parser = argparse.ArgumentParser()

    parser.add_argument('manifest', nargs='?', default=default_manifest)
    parser.add_argument('-n', '--dryrun', action='store_true')

    args = parser.parse_args()

    if not os.path.exists(args.manifest):
        setup(args.manifest)

    manifest = Manifest(args.manifest)

    try:
        shell = AnglerShell(manifest)
        shell.settings['dryrun'] = args.dryrun
        shell.cmdloop()
    except KeyboardInterrupt:
        print()
        exit(0)
