#!/usr/bin/env python3

from angler.core import Manifest, default_manifest
from angler.command import Add
from angler.util import uri, key_value

import argparse
import cmd
import shlex


class AnglerShell(cmd.Cmd):
    def __init__(self, manifest):
        super(AnglerShell, self).__init__()
        self.manifest = manifest
        self.prompt = 'angler:{}âŸ« '.format(manifest.database)
        self.settings = dict()

    def default(self, line):
        if line == 'EOF':
            print('exit')
            return True
        else:
            return super(AnglerShell, self).default(line)

    def do_exit(self, arg):
        return True

    def do_add(self, arg):
        try:
            add = Add.from_arguments(self.manifest, shlex.split(arg))
        except SystemExit:
            return

        if self.settings['dryrun']:
            print('Would add node', add.uri, add.status)
        else:
            add.run()

    def do_var(self, arg):
        if not arg:
            for key in sorted(self.settings):
                print('{}={!r}'.format(key, self.settings[key]))
            return
        key, successful, value = arg.partition('=')
        if successful:
            values = shlex.split(value)
            if len(values) > 1:
                raise ValueError("Unexpected arguments: {}".format(values[1:]))
            self.settings[key.strip()] = values[0]
        else:
            key = arg.strip()
            print('{}={!r}'.format(key, self.settings[key]))

    def help_add(self):
        print(Add.help())


if __name__ == '__main__':

    parser = argparse.ArgumentParser()

    parser.add_argument('manifest', nargs='?', default=default_manifest)
    parser.add_argument('-n', '--dryrun', action='store_true')

    args = parser.parse_args()

    manifest = Manifest(args.manifest)

    try:
        shell = AnglerShell(manifest)
        shell.settings['dryrun'] = args.dryrun
        shell.cmdloop()
    except KeyboardInterrupt:
        print()
        exit(0)
